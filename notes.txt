# Overview of git

Git consists of three parts

* the directory (working tree), where your files are
* the staging area, where you construct the next version
* the object store, where the versions are stored

# Setting up git

## Initialization

The command `git init` creates the git stuff (staging and the object store) in the current directory.

## Settings

The `--global` option sets the settings for the whole computer instead of just the directory

```
git config --global user.name "Ian Roberts"
git config --global user.email "roberid@mcmaster.ca"
git config --global color.ui auto
git config --global core.editor "emacs -nw"
```

# Creating the next version

1. Make the desired changes to the files
2. Add (stage) the changes to be in the next version
3. Commit the staged changes as the next version

```
emacs -nw notes.txt
git add notes.txt
git commit
```

# Viewing changes

The `git status` command shows you where you are at.  The red colour indicates changes that are not set to be part of the next version.  The green color indicates changes that are set to be part of the next version.

## Difference

View what is not going to be part of the next version

```
git diff [<path>]
```

View what is going to be part of the next version

```
git diff --staged [<path>]
```

# History

You can see the history of your changes with 

```
git log
```

Each version is associated with a big, ugly number.  You don't have to type in the full number, just the first couple of digits.  A nice summary is given by

```
git log --oneline
```

## Specifying previous versions

You can specify a previous version with `<commit>~<n>` where `<commit>` is version number of name associated with the version.  The `<n>` says to go back n versions.

You can specify a version by its number.  The easiest way to get the numbers is to use `git log`.
